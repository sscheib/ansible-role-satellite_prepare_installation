---
- name: 'assert | Ensure boolean variable are defined properly'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', __t_var) is defined"
      - "lookup('ansible.builtin.vars', __t_var) is boolean"
      - "lookup('ansible.builtin.vars', __t_var) | bool | string == lookup('ansible.builtin.vars', __t_var) | string"
    success_msg: "Variable '{{ __t_var }}' defined properly - value: '{{ lookup('ansible.builtin.vars', __t_var) }}'"
    fail_msg: "Variable '{{ __t_var }}' failed to validate"
    quiet: '{{ _sat_quiet_assert | default(false) }}'
  loop:
    - '_sat_quiet_assert'
    - '_sat_install_sos_package'
    - '_sat_update_all_packages'
    - '_sat_reboot_satellite_after_update'
  loop_control:
    loop_var: '__t_var'

- name: 'assert | Ensure string variables are defined properly'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', __t_var) is defined"
      - "lookup('ansible.builtin.vars', __t_var) is string"
      - "lookup('ansible.builtin.vars', __t_var) != None"
      - "lookup('ansible.builtin.vars', __t_var) != ''"
    success_msg: "Variable '{{ __t_var }}' defined properly - value: '{{ lookup('ansible.builtin.vars', __t_var) }}'"
    fail_msg: "Variable '{{ __t_var }}' failed to validate"
    quiet: '{{ _sat_quiet_assert }}'
  loop:
    - '_sat_chrony_package_name'
    - '_sat_sos_package_name'
    - '_sat_package_name'
    - '_sat_dnf_module_regexp'
    - '_sat_dnf_module_name'
  loop_control:
    loop_var: '__t_var'

- name: 'assert | Ensure integer variables are defined properly'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', __t_var) is defined"
      - "lookup('ansible.builtin.vars', __t_var) | int | string == lookup('ansible.builtin.vars', __t_var) | string"
      - "lookup('ansible.builtin.vars', __t_var) | int is number"
      - "lookup('ansible.builtin.vars', __t_var) | int is integer"
      - "lookup('ansible.builtin.vars', __t_var) | int >= 0"
    success_msg: "Variable '{{ __t_var }}' defined properly - value: '{{ lookup('ansible.builtin.vars', __t_var) }}'"
    fail_msg: "Variable '{{ __t_var }}' failed to validate"
    quiet: '{{ _sat_quiet_assert }}'
  loop:
    - '_sat_reboot_timeout'
    - '_sat_post_reboot_delay'
  loop_control:
    loop_var: '__t_var'

- name: 'assert | Ensure _sat_firewalld_ports is defined properly (when defined)'
  ansible.builtin.assert:
    that:
      # _sat_firewalld_ports is a list
      - '_sat_firewalld_ports is not string'
      - '_sat_firewalld_ports is not mapping'
      - '_sat_firewalld_ports is iterable'
      - '_sat_firewalld_ports is sequence'

      # no items with 'port' undefined
      - >-
        _sat_firewalld_ports |
        selectattr('port', 'undefined') |
        length == 0

      # all items' port attribute is a string
      - >-
        _sat_firewalld_ports |
        selectattr('port', 'string') |
        length == _sat_firewalld_ports | length

      # all items' port attribute is not empty
      - >-
        _sat_firewalld_ports |
        selectattr('port', 'match', '^$') |
        length == 0

      # all items' port attribute is not None
      - >-
        _sat_firewalld_ports |
        selectattr('port', 'match', 'None') |
        length == 0

      # all port definitions match <port/protocol> or <port-port/protocol>
      - >-
        _sat_firewalld_ports |
        selectattr('port', 'match', '^\d+(-\d+)?\/(?:tcp|udp|icmp)$') |
        length == _sat_firewalld_ports | length

      # no items with 'zone' undefined
      - >-
        _sat_firewalld_ports |
        selectattr('zone', 'undefined') |
        length == 0

      # all items' zone attribute is a string
      - >-
        _sat_firewalld_ports |
        selectattr('zone', 'string') |
        length == _sat_firewalld_ports | length

      # all items' zone attribute is not empty
      - >-
        _sat_firewalld_ports |
        selectattr('zone', 'match', '^$') |
        length == 0

      # all items' zone attribute is not None
      - >-
        _sat_firewalld_ports |
        selectattr('zone', 'match', 'None') |
        length == 0

    success_msg: "Variable '_sat_firewalld_ports' defined properly"
    fail_msg: "Variable '_sat_firewalld_ports' failed to validate"
    quiet: '{{ _sat_quiet_assert }}'
  when:
    - '_sat_firewalld_ports is defined'
    - '_sat_firewalld_ports | list | default([]) | length > 0'

- name: 'assert | Ensure _sat_firewalld_services is defined properly (when defined)'
  ansible.builtin.assert:
    that:
      # _sat_firewalld_services is a list
      - '_sat_firewalld_services is not string'
      - '_sat_firewalld_services is not mapping'
      - '_sat_firewalld_services is iterable'
      - '_sat_firewalld_services is sequence'

      # no items with 'name' undefined
      - >-
        _sat_firewalld_services |
        selectattr('name', 'undefined') |
        length == 0

      # all items' name attribute is a string
      - >-
        _sat_firewalld_services |
        selectattr('name', 'string') |
        length == _sat_firewalld_services | length

      # all items' name attribute is not empty
      - >-
        _sat_firewalld_services |
        selectattr('name', 'match', '^$') |
        length == 0

      # all items' name attribute is not None
      - >-
        _sat_firewalld_services |
        selectattr('name', 'match', 'None') |
        length == 0

      # no items with 'zone' undefined
      - >-
        _sat_firewalld_services |
        selectattr('zone', 'undefined') |
        length == 0

      # all items' zone attribute is a string
      - >-
        _sat_firewalld_services |
        selectattr('zone', 'string') |
        length == _sat_firewalld_services | length

      # all items' zone attribute is not empty
      - >-
        _sat_firewalld_services |
        selectattr('zone', 'match', '^$') |
        length == 0

      # all items' zone attribute is not None
      - >-
        _sat_firewalld_services |
        selectattr('zone', 'match', 'None') |
        length == 0

    success_msg: "Variable '_sat_firewalld_services' defined properly"
    fail_msg: "Variable '_sat_firewalld_services' failed to validate"
    quiet: '{{ _sat_quiet_assert }}'
  when:
    - '_sat_firewalld_services is defined'
    - '_sat_firewalld_services | list | default([]) | length > 0'
...
